<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:p="http://www.springframework.org/schema/p"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
	<!-- 1 配置 C3P0数据源 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config/c3p0.properties"/>
	</bean>
    <bean id="dataSource" destroy-method="close" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
		      <!--当连接池中的连接用完时，C3P0一次性创建新连接的数目-->  
        <property name="acquireIncrement" value="10" />  
        <!-- 始化时创建的连接数，应在minPoolSize与maxPoolSize之间取值。默认为3；-->  
        <property name="initialPoolSize" value="5" />  
        <!-- 最大连接数 -->
        <property name="maxPoolSize" value="200"/>
        <!-- 最小连接数 -->
        <property name="minPoolSize" value="3"/>
        <!-- 最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0； -->  
        <property name="maxIdleTime" value="60" />  
        <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatement数量。但由于预缓存的Statement属  
于单个Connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素，如果maxStatements与  
maxStatementsPerConnection均为0，则缓存被关闭。默认为0； -->  
        <property name="maxStatements" value="64" />  
        <!-- 连接池内单个连接所拥有的最大缓存Statement数。默认为0；  -->  
        <property name="maxStatementsPerConnection" value="12" />  
        <!--C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能，通过多线程实现多个操作同时被执行。默认为3； 
-->  
        <property name="numHelperThreads" value="10" />  
        <!-- 用户修改系统配置参数执行前最多等待的秒数。默认为300； -->  
        <property name="propertyCycle" value="300" />  
	</bean>
	
	<!-- 2 定义SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 注入其它选项配置 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<!-- 是否使用二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<!-- 启用缓存机制 -->
				<prop key="hibernate.cache.use_query_cache">false</prop>
			</props>
		</property>
		<!-- 注入映射文件 -->
		<property name="mappingLocations">
			<list>
				<value>classpath:hibernate/*.hbm.xml</value>
			</list>
		</property>
	</bean>
	    <bean id="baseDao" class="com.blog.web.base.dao.BaseDao">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>
    <!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<tx:advice id="transactionadvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" />
			<tx:method name="add*"/>
			<tx:method name="insert*"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="modify*"/>
			<tx:method name="del*"/>
			<tx:method name="remove*"/>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="list*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 切入点
		    事务的管理要进行细粒度化。一般细化到service
		  -->
		<aop:pointcut id="tranpointcut" expression="execution(* com.blog.web.service..*.*(..))" />
		<aop:advisor advice-ref="transactionadvice" pointcut-ref="tranpointcut"/>
	</aop:config>
</beans>

















